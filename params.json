{"name":"Dapper.FluentMap","tagline":"Provides a simple API to map POCO properties to database columns when using Dapper.","body":"[Dapper.FluentMap](http://henkmollema.github.io/Dapper-FluentMap)\r\n================\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/x6grw3cjuyud9c76)](https://ci.appveyor.com/project/HenkMollema/dapper-fluentmap)\r\n### Introduction\r\n\r\nThis [Dapper](https://github.com/SamSaffron/dapper-dot-net/) extension allows you to fluently congfigure the mapping between POCO properties and database columns. This keeps your POCO's clean of mapping attributes. The functionality is similar to [Entity Framework Fluent API](http://msdn.microsoft.com/nl-nl/data/jj591617.aspx). If you have any questions, suggestions or bugs, please don't hesitate to [contact me](mailto:henkmollema@gmail.com) or create an issue.\r\n\r\n<hr>\r\n\r\n### Download\r\n[![Download Dapper.FluentMap on NuGet](http://i.imgur.com/Rs483do.png \"Download Dapper.FluentMap on NuGet\")](https://www.nuget.org/packages/Dapper.FluentMap)\r\n\r\n<hr>\r\n\r\n### Usage\r\n#### Manually mapping properties\r\nYou can map property names manually using the [`EntityMap<TEntity>`](https://github.com/HenkMollema/Dapper-FluentMap/blob/master/src/Dapper.FluentMap/Mapping/EntityMap.cs) class. When creating a derived class, the constructor gives you access to the `Map` method, allowing you to specify to which database column name a certain property of `TEntity` should map to.\r\n```csharp\r\npublic class ProductMap : EntityMap<Product>\r\n{\r\n\tpublic ProductMap()\r\n\t{\r\n\t\tMap(p => p.Name)\r\n\t\t\t.ToColumn(\"strName\");\r\n\t\t\t\r\n\t\tMap(p => p.LastModified)\r\n\t\t\t.Ignore();\r\n\t}\r\n}\r\n```\r\n\r\nInitialization: \r\n```csharp\r\nFluentMapper.Intialize(config =>\r\n\t\t\t\t\t   {\r\n\t\t\t\t\t\t   config.AddMap(new ProductMap());\r\n\t\t\t\t\t   });\r\n```\r\n\r\n#### Mapping properties using conventions\r\n\r\nWhen you have a lot of entity types, creating manual mapping classes can become plumbing. If your column names adhere to some kind of naming convention, you might be better off by configuring a mapping convention.\r\n\r\nYou can create a convention by creating a class which derives from the [`Convention`](https://github.com/HenkMollema/Dapper-FluentMap/blob/master/src/Dapper.FluentMap/Conventions/Convention.cs) class. In the contructor you can configure the property conventions:\r\n```csharp\r\npublic class TypePrefixConvention : Convention\r\n{\r\n    public TypePrefixConvention()\r\n    {\r\n        // Map all properties of type int and with the name 'id' to column 'autID'.\r\n        Properties<int>()\r\n            .Where(c => c.Name.ToLower() == \"id\")\r\n            .Configure(c => c.HasColumnName(\"autID\"));\r\n\r\n        // Prefix all properties of type string with 'str' when mapping to column names.\r\n        Properties<string>()\r\n            .Configure(c => c.HasPrefix(\"str\"));\r\n\r\n        // Prefix all properties of type int with 'int' when mapping to column names.\r\n        Properties<int>()\r\n            .Configure(c => c.HasPrefix(\"int\"));\r\n    }\r\n}\r\n```\r\n\r\nWhen initializing Dapper.FluentMap with conventions, the entities on which a convention applies must be configured. You can choose to either configure the entities explicitly or use assembly scanning.\r\n\r\n```csharp\r\nFluentMapper.Intialize(config =>\r\n    {\r\n        // Configure entities explicitly.\r\n        config.AddConvention<TypePrefixConvention>()\r\n              .ForEntity<Product>()\r\n              .ForEntity<Order>;\r\n\r\n        // Configure all entities in a certain assembly with an optional namespaces filter.\r\n        config.AddConvention<TypePrefixConvention>()\r\n              .ForEntitiesInAssembly(typeof(Product).Assembly, \"App.Domain.Model\");\r\n\r\n        // Configure all entities in the current assembly with an optional namespaces filter.\r\n        config.AddConvention<TypePrefixConvention>()\r\n              .ForEntitiesInCurrentAssembly(\"App.Domain.Model.Catalog\", \"App.Domain.Model.Order\");\r\n    });\r\n```\r\n\r\n##### Transformations\r\nThe convention API allows you to configure transformation of property names to database column names. An implementation would look like this:\r\n```csharp\r\npublic class PropertyTransformConvention : Convention\r\n{\r\n    public PropertyTransformConvention()\r\n    {\r\n        Properties()\r\n            .Configure(c => c.Transform(s => Regex.Replace(input: s, pattern: \"([A-Z])([A-Z][a-z])|([a-z0-9])([A-Z])\", replacement: \"$1$3_$2$4\")));\r\n    }\r\n}\r\n```\r\n\r\nThis configuration will map camel case property names to underscore seperated database column names (`UrlOptimizedName` -> `Url_Optimized_Name`).\r\n","google":"UA-50793047-1","note":"Don't delete this file! It's used internally to help with page regeneration."}