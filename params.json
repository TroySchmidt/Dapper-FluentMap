{"name":"Dapper.FluentMap","tagline":"Provides a simple API to map POCO properties to database columns when using Dapper.","body":"[Dapper.FluentMap](http://henkmollema.github.io/Dapper-FluentMap)\r\n================\r\n\r\n### Introduction\r\nThis [Dapper](https://github.com/SamSaffron/dapper-dot-net/) extension allows you to fluently congfigure the mapping between POCO properties and database columns. This keeps your POCO's clean of mapping attributes. The functionality is similar to [Entity Framework Fluent API](http://msdn.microsoft.com/nl-nl/data/jj591617.aspx).\r\n\r\n<hr>\r\n\r\n### Download\r\n[![Download Dapper.FluentMap on NuGet](http://i.imgur.com/Rs483do.png \"Download Dapper.FluentMap on NuGet\")](https://www.nuget.org/packages/Dapper.FluentMap)\r\n\r\n<hr>\r\n\r\n### Usage\r\n#### Mapping properties using `EntityMap<TEntity>`\r\n```csharp\r\npublic class ProductMap : EntityMap<Product>\r\n{\r\n\tpublic ProductMap()\r\n\t{\r\n\t\tMap(p => p.Name)\r\n\t\t\t.ToColumn(\"strName\");\r\n\t\t\t\r\n\t\tMap(p => p.LastModified)\r\n\t\t\t.Ignore();\r\n\t}\r\n}\r\n```\r\n\r\nInitialization: \r\n```csharp\r\nFluentMapper.Intialize(config =>\r\n\t\t\t\t\t   {\r\n\t\t\t\t\t\t   config.AddMap(new ProductMap());\r\n\t\t\t\t\t   });\r\n```\r\n\r\n#### Mapping properties using conventions\r\n\r\nYou can create a convention by creating a class which derives from the `Convention` class. In the contructor you can configure the property conventions:\r\n```csharp\r\npublic class TypePrefixConvention : Convention\r\n{\r\n    public TypePrefixConvention()\r\n    {\r\n        // Map all properties of type int and with the name 'id' to column 'autID'.\r\n        Properties<int>()\r\n            .Where(c => c.Name.ToLower() == \"id\")\r\n            .Configure(c => c.HasColumnName(\"autID\"));\r\n\r\n        // Prefix all properties of type string with 'str' when mapping to column names.\r\n        Properties<string>()\r\n            .Configure(c => c.HasPrefix(\"str\"));\r\n\r\n        // Prefix all properties of type int with 'int' when mapping to column names.\r\n        Properties<int>()\r\n            .Configure(c => c.HasPrefix(\"int\"));\r\n    }\r\n}\r\n```\r\n\r\nWhen initializing Dapper.FluentMap with conventions, the entities on which a convention applies must be configured. You can choose to either configure the entities explicitly or scan a specified, or the current assembly.\r\n\r\n```csharp\r\nFluentMapper.Intialize(config =>\r\n    {\r\n        // Configure entities explicitly.\r\n        config.AddConvention<TypePrefixConvention>()\r\n              .ForEntity<Product>()\r\n              .ForEntity<Order>;\r\n\r\n        // Configure all entities in a certain assembly with an optional namespaces filter.\r\n        config.AddConvention<TypePrefixConvention>()\r\n              .ForEntitiesInAssembly(typeof(Product).Assembly, \"App.Domain.Model\");\r\n\r\n        // Configure all entities in the current assembly with an optional namespaces filter.\r\n        config.AddConvention<TypePrefixConvention>()\r\n              .ForEntitiesInCurrentAssembly(\"App.Domain.Model.Catalog\", \"App.Domain.Model.Order\");\r\n    });\r\n```\r\n","google":"UA-50793047-1","note":"Don't delete this file! It's used internally to help with page regeneration."}